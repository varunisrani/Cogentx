2025-02-10 20:41:29,660 - root - [INFO] - ai_crew_generator.py:setup_logging:53 - Logging to files:
2025-02-10 20:41:29,661 - root - [INFO] - ai_crew_generator.py:setup_logging:54 -   Debug log: linkdin/crew_generation_debug_20250210_204129.log
2025-02-10 20:41:29,661 - root - [INFO] - ai_crew_generator.py:setup_logging:55 -   Info log: linkdin/crew_generation_20250210_204129.log
2025-02-10 20:41:29,662 - main - [INFO] - ai_crew_generator.py:main:720 - ==================================================
2025-02-10 20:41:29,662 - main - [INFO] - ai_crew_generator.py:main:721 - Starting CrewAI App Generation Process
2025-02-10 20:41:29,662 - main - [INFO] - ai_crew_generator.py:main:722 - ==================================================
2025-02-10 20:41:29,662 - main - [INFO] - ai_crew_generator.py:main:723 - Output Directory: linkdin
2025-02-10 20:41:29,663 - main - [INFO] - ai_crew_generator.py:main:724 - JSON Configuration Path: /Users/varunisrani/Desktop/CrewAI-Studio/linkdinpost.json
2025-02-10 20:41:29,663 - main - [INFO] - ai_crew_generator.py:main:754 - Loading JSON configuration...
2025-02-10 20:41:29,665 - main - [DEBUG] - ai_crew_generator.py:main:757 - Loaded JSON content: {
  "Crew creation details": {
    "Name": "LinkedInPostGenerator",
    "Process": "sequence",
    "Agents": [
      "InputAnalysisAgent",
      "NLPAgent",
      "SentimentAnalysisAgent",
      "HashtagGeneratorAgent",
      "ContentAnalysisAgent",
      "DraftReviewAgent",
      "FinalOutputAgent",
      "PerformanceMonitoringAgent"
    ],
    "Tasks": [
      "AnalyzeInput",
      "GeneratePost",
      "AnalyzeSentiment",
      "GenerateHashtags",
      "AnalyzeContent",
      "ReviewDraft",
      "GenerateFinalOutput",
      "MonitorPerformance"
    ],
    "Manager LLM": "GPT-4",
    "Manager Agent": "AIManager",
    "Verbose": false,
    "Memory": "enabled",
    "Cache": "enabled",
    "Planning": "iterative",
    "Max req/min": 1000
  },
  "Tools": [],
  "Agents": [
    {
      "Create agent": "InputAnalysisAgent",
      "Role": "Analyze user input for content generation",
      "Backstory": "Experienced in data collection and user interaction",
      "Goal": "To gather and prepare data for post generation",
      "Allow delegation": "yes",
      "Verbose": false,
      "Cache": "enabled",
      "LLM": "GPT-4",
      "Temperature": 0.5,
      "Max iteration": 5,
      "Select tools": [
        "CustomApiTool"
      ]
    },
    {
      "Create agent": "NLPAgent",
      "Role": "Generate coherent post drafts",
      "Backstory": "Specializes in natural language processing",
      "Goal": "To produce engaging and relevant post drafts",
      "Allow delegation": "yes",
      "Verbose": false,
      "Cache": "enabled",
      "LLM": "GPT-4",
      "Temperature": 0.7,
      "Max iteration": 5,
      "Select tools": [
        "CustomCodeInterpreterTool"
      ]
    },
    {
      "Create agent": "SentimentAnalysisAgent",
      "Role": "Analyze emotional tone of content",
      "Backstory": "Expert in sentiment analysis",
      "Goal": "Ensure alignment with user intent",
      "Allow delegation": "yes",
      "Verbose": false,
      "Cache": "enabled",
      "LLM": "GPT-4",
      "Temperature": 0.5,
      "Max iteration": 5,
      "Select tools": [
        "CustomApiTool"
      ]
    },
    {
      "Create agent": "HashtagGeneratorAgent",
      "Role": "Suggest relevant hashtags",
      "Backstory": "Knowledgeable in social media trends",
      "Goal": "Enhance post visibility",
      "Allow delegation": "yes",
      "Verbose": false,
      "Cache": "enabled",
      "LLM": "GPT-4",
      "Temperature": 0.5,
      "Max iteration": 5,
      "Select tools": [
        "CustomApiTool"
      ]
    },
    {
      "Create agent": "ContentAnalysisAgent",
      "Role": "Evaluate clarity and engagement of posts",
      "Backstory": "Skilled in content optimization",
      "Goal": "Refine the post for publishing",
      "Allow delegation": "yes",
      "Verbose": false,
      "Cache": "enabled",
      "LLM": "GPT-4",
      "Temperature": 0.5,
      "Max iteration": 5,
      "Select tools": [
        "CustomCodeInterpreterTool"
      ]
    },
    {
      "Create agent": "DraftReviewAgent",
      "Role": "Facilitate user review of draft posts",
      "Backstory": "Experienced in user feedback processes",
      "Goal": "Iterate on user feedback to improve drafts",
      "Allow delegation": "yes",
      "Verbose": false,
      "Cache": "enabled",
      "LLM": "GPT-4",
      "Temperature": 0.5,
      "Max iteration": 5,
      "Select tools": [
        "CustomApiTool"
      ]
    },
    {
      "Create agent": "FinalOutputAgent",
      "Role": "Compile final post for publication",
      "Backstory": "Expert in content management",
      "Goal": "Ensure readiness of posts for LinkedIn",
      "Allow delegation": "yes",
      "Verbose": false,
      "Cache": "enabled",
      "LLM": "GPT-4",
      "Temperature": 0.5,
      "Max iteration": 5,
      "Select tools": [
        "CustomApiTool"
      ]
    },
    {
      "Create agent": "PerformanceMonitoringAgent",
      "Role": "Track engagement metrics",
      "Backstory": "Analytical background in social media",
      "Goal": "Optimize future content strategies",
      "Allow delegation": "yes",
      "Verbose": false,
      "Cache": "enabled",
      "LLM": "GPT-4",
      "Temperature": 0.5,
      "Max iteration": 5,
      "Select tools": [
        "CustomApiTool"
      ]
    }
  ],
  "Tasks": [
    {
      "Create task": "AnalyzeInput",
      "Description": "Collect and analyze user-provided data",
      "Expected output": "Processed user input for further use",
      "Agent": "InputAnalysisAgent",
      "Async execution": "no",
      "Context from async tasks": "none",
      "Context from sync tasks": "none"
    },
    {
      "Create task": "GeneratePost",
      "Description": "Generate coherent post drafts",
      "Expected output": "Draft post ready for review",
      "Agent": "NLPAgent",
      "Async execution": "no",
      "Context from async tasks": "Processed user input",
      "Context from sync tasks": "none"
    },
    {
      "Create task": "AnalyzeSentiment",
      "Description": "Assess the emotional tone of the content",
      "Expected output": "Sentiment analysis report",
      "Agent": "SentimentAnalysisAgent",
      "Async execution": "no",
      "Context from async tasks": "Draft post",
      "Context from sync tasks": "none"
    },
    {
      "Create task": "GenerateHashtags",
      "Description": "Suggest relevant hashtags for the post",
      "Expected output": "List of hashtags",
      "Agent": "HashtagGeneratorAgent",
      "Async execution": "no",
      "Context from async tasks": "Draft post",
      "Context from sync tasks": "none"
    },
    {
      "Create task": "AnalyzeContent",
      "Description": "Evaluate the generated post for clarity and engagement",
      "Expected output": "Content analysis report",
      "Agent": "ContentAnalysisAgent",
      "Async execution": "no",
      "Context from async tasks": "Draft post, Hashtags",
      "Context from sync tasks": "none"
    },
    {
      "Create task": "ReviewDraft",
      "Description": "Facilitate user review of draft posts",
      "Expected output": "User feedback on draft",
      "Agent": "DraftReviewAgent",
      "Async execution": "yes",
      "Context from async tasks": "Content analysis report",
      "Context from sync tasks": "Draft post"
    },
    {
      "Create task": "GenerateFinalOutput",
      "Description": "Compile the approved draft and hashtags into a final post",
      "Expected output": "Final post ready for publication",
      "Agent": "FinalOutputAgent",
      "Async execution": "no",
      "Context from async tasks": "User feedback",
      "Context from sync tasks": "Draft post"
    },
    {
      "Create task": "MonitorPerformance",
      "Description": "Track post engagement metrics",
      "Expected output": "Performance report",
      "Agent": "PerformanceMonitoringAgent",
      "Async execution": "yes",
      "Context from async tasks": "Final post",
      "Context from sync tasks": "none"
    }
  ]
}
2025-02-10 20:41:29,666 - main - [INFO] - ai_crew_generator.py:main:760 - Creating AICrewGenerator instance...
2025-02-10 20:41:29,666 - AICrewGenerator - [INFO] - ai_crew_generator.py:__init__:63 - ==================================================
2025-02-10 20:41:29,667 - AICrewGenerator - [INFO] - ai_crew_generator.py:__init__:64 - Initializing AICrewGenerator
2025-02-10 20:41:29,667 - AICrewGenerator - [INFO] - ai_crew_generator.py:__init__:65 - ==================================================
2025-02-10 20:41:29,667 - AICrewGenerator - [DEBUG] - ai_crew_generator.py:__init__:67 - Setting up OpenAI LLM with model: gpt-4o-mini
2025-02-10 20:41:29,679 - httpx - [DEBUG] - _config.py:load_ssl_context:82 - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-02-10 20:41:29,682 - httpx - [DEBUG] - _config.py:load_ssl_context_verify:148 - load_verify_locations cafile='/Users/varunisrani/Desktop/CrewAI-Studio/venv/lib/python3.11/site-packages/certifi/cacert.pem'
2025-02-10 20:41:29,696 - httpx - [DEBUG] - _config.py:load_ssl_context:82 - load_ssl_context verify=True cert=None trust_env=True http2=False
2025-02-10 20:41:29,696 - httpx - [DEBUG] - _config.py:load_ssl_context_verify:148 - load_verify_locations cafile='/Users/varunisrani/Desktop/CrewAI-Studio/venv/lib/python3.11/site-packages/certifi/cacert.pem'
2025-02-10 20:41:29,705 - AICrewGenerator - [INFO] - ai_crew_generator.py:__init__:72 - Successfully initialized OpenAI LLM
2025-02-10 20:41:29,705 - main - [INFO] - ai_crew_generator.py:main:764 - Normalizing JSON format...
2025-02-10 20:41:29,705 - main - [DEBUG] - ai_crew_generator.py:main:765 - Starting JSON normalization process
2025-02-10 20:41:29,705 - AICrewGenerator - [INFO] - ai_crew_generator.py:normalize_json_input:628 - Normalizing JSON input format
2025-02-10 20:41:29,706 - AICrewGenerator - [DEBUG] - ai_crew_generator.py:normalize_json_input:698 - Sending normalization prompt to OpenAI
2025-02-10 20:41:29,711 - openai._base_client - [DEBUG] - _base_client.py:_build_request:453 - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': '\n        Transform this JSON configuration into the standard CrewAI format.\n        Input JSON:\n        {\n  "Crew creation details": {\n    "Name": "LinkedInPostGenerator",\n    "Process": "sequence",\n    "Agents": [\n      "InputAnalysisAgent",\n      "NLPAgent",\n      "SentimentAnalysisAgent",\n      "HashtagGeneratorAgent",\n      "ContentAnalysisAgent",\n      "DraftReviewAgent",\n      "FinalOutputAgent",\n      "PerformanceMonitoringAgent"\n    ],\n    "Tasks": [\n      "AnalyzeInput",\n      "GeneratePost",\n      "AnalyzeSentiment",\n      "GenerateHashtags",\n      "AnalyzeContent",\n      "ReviewDraft",\n      "GenerateFinalOutput",\n      "MonitorPerformance"\n    ],\n    "Manager LLM": "GPT-4",\n    "Manager Agent": "AIManager",\n    "Verbose": false,\n    "Memory": "enabled",\n    "Cache": "enabled",\n    "Planning": "iterative",\n    "Max req/min": 1000\n  },\n  "Tools": [],\n  "Agents": [\n    {\n      "Create agent": "InputAnalysisAgent",\n      "Role": "Analyze user input for content generation",\n      "Backstory": "Experienced in data collection and user interaction",\n      "Goal": "To gather and prepare data for post generation",\n      "Allow delegation": "yes",\n      "Verbose": false,\n      "Cache": "enabled",\n      "LLM": "GPT-4",\n      "Temperature": 0.5,\n      "Max iteration": 5,\n      "Select tools": [\n        "CustomApiTool"\n      ]\n    },\n    {\n      "Create agent": "NLPAgent",\n      "Role": "Generate coherent post drafts",\n      "Backstory": "Specializes in natural language processing",\n      "Goal": "To produce engaging and relevant post drafts",\n      "Allow delegation": "yes",\n      "Verbose": false,\n      "Cache": "enabled",\n      "LLM": "GPT-4",\n      "Temperature": 0.7,\n      "Max iteration": 5,\n      "Select tools": [\n        "CustomCodeInterpreterTool"\n      ]\n    },\n    {\n      "Create agent": "SentimentAnalysisAgent",\n      "Role": "Analyze emotional tone of content",\n      "Backstory": "Expert in sentiment analysis",\n      "Goal": "Ensure alignment with user intent",\n      "Allow delegation": "yes",\n      "Verbose": false,\n      "Cache": "enabled",\n      "LLM": "GPT-4",\n      "Temperature": 0.5,\n      "Max iteration": 5,\n      "Select tools": [\n        "CustomApiTool"\n      ]\n    },\n    {\n      "Create agent": "HashtagGeneratorAgent",\n      "Role": "Suggest relevant hashtags",\n      "Backstory": "Knowledgeable in social media trends",\n      "Goal": "Enhance post visibility",\n      "Allow delegation": "yes",\n      "Verbose": false,\n      "Cache": "enabled",\n      "LLM": "GPT-4",\n      "Temperature": 0.5,\n      "Max iteration": 5,\n      "Select tools": [\n        "CustomApiTool"\n      ]\n    },\n    {\n      "Create agent": "ContentAnalysisAgent",\n      "Role": "Evaluate clarity and engagement of posts",\n      "Backstory": "Skilled in content optimization",\n      "Goal": "Refine the post for publishing",\n      "Allow delegation": "yes",\n      "Verbose": false,\n      "Cache": "enabled",\n      "LLM": "GPT-4",\n      "Temperature": 0.5,\n      "Max iteration": 5,\n      "Select tools": [\n        "CustomCodeInterpreterTool"\n      ]\n    },\n    {\n      "Create agent": "DraftReviewAgent",\n      "Role": "Facilitate user review of draft posts",\n      "Backstory": "Experienced in user feedback processes",\n      "Goal": "Iterate on user feedback to improve drafts",\n      "Allow delegation": "yes",\n      "Verbose": false,\n      "Cache": "enabled",\n      "LLM": "GPT-4",\n      "Temperature": 0.5,\n      "Max iteration": 5,\n      "Select tools": [\n        "CustomApiTool"\n      ]\n    },\n    {\n      "Create agent": "FinalOutputAgent",\n      "Role": "Compile final post for publication",\n      "Backstory": "Expert in content management",\n      "Goal": "Ensure readiness of posts for LinkedIn",\n      "Allow delegation": "yes",\n      "Verbose": false,\n      "Cache": "enabled",\n      "LLM": "GPT-4",\n      "Temperature": 0.5,\n      "Max iteration": 5,\n      "Select tools": [\n        "CustomApiTool"\n      ]\n    },\n    {\n      "Create agent": "PerformanceMonitoringAgent",\n      "Role": "Track engagement metrics",\n      "Backstory": "Analytical background in social media",\n      "Goal": "Optimize future content strategies",\n      "Allow delegation": "yes",\n      "Verbose": false,\n      "Cache": "enabled",\n      "LLM": "GPT-4",\n      "Temperature": 0.5,\n      "Max iteration": 5,\n      "Select tools": [\n        "CustomApiTool"\n      ]\n    }\n  ],\n  "Tasks": [\n    {\n      "Create task": "AnalyzeInput",\n      "Description": "Collect and analyze user-provided data",\n      "Expected output": "Processed user input for further use",\n      "Agent": "InputAnalysisAgent",\n      "Async execution": "no",\n      "Context from async tasks": "none",\n      "Context from sync tasks": "none"\n    },\n    {\n      "Create task": "GeneratePost",\n      "Description": "Generate coherent post drafts",\n      "Expected output": "Draft post ready for review",\n      "Agent": "NLPAgent",\n      "Async execution": "no",\n      "Context from async tasks": "Processed user input",\n      "Context from sync tasks": "none"\n    },\n    {\n      "Create task": "AnalyzeSentiment",\n      "Description": "Assess the emotional tone of the content",\n      "Expected output": "Sentiment analysis report",\n      "Agent": "SentimentAnalysisAgent",\n      "Async execution": "no",\n      "Context from async tasks": "Draft post",\n      "Context from sync tasks": "none"\n    },\n    {\n      "Create task": "GenerateHashtags",\n      "Description": "Suggest relevant hashtags for the post",\n      "Expected output": "List of hashtags",\n      "Agent": "HashtagGeneratorAgent",\n      "Async execution": "no",\n      "Context from async tasks": "Draft post",\n      "Context from sync tasks": "none"\n    },\n    {\n      "Create task": "AnalyzeContent",\n      "Description": "Evaluate the generated post for clarity and engagement",\n      "Expected output": "Content analysis report",\n      "Agent": "ContentAnalysisAgent",\n      "Async execution": "no",\n      "Context from async tasks": "Draft post, Hashtags",\n      "Context from sync tasks": "none"\n    },\n    {\n      "Create task": "ReviewDraft",\n      "Description": "Facilitate user review of draft posts",\n      "Expected output": "User feedback on draft",\n      "Agent": "DraftReviewAgent",\n      "Async execution": "yes",\n      "Context from async tasks": "Content analysis report",\n      "Context from sync tasks": "Draft post"\n    },\n    {\n      "Create task": "GenerateFinalOutput",\n      "Description": "Compile the approved draft and hashtags into a final post",\n      "Expected output": "Final post ready for publication",\n      "Agent": "FinalOutputAgent",\n      "Async execution": "no",\n      "Context from async tasks": "User feedback",\n      "Context from sync tasks": "Draft post"\n    },\n    {\n      "Create task": "MonitorPerformance",\n      "Description": "Track post engagement metrics",\n      "Expected output": "Performance report",\n      "Agent": "PerformanceMonitoringAgent",\n      "Async execution": "yes",\n      "Context from async tasks": "Final post",\n      "Context from sync tasks": "none"\n    }\n  ]\n}\n        \n        Convert it to match this exact structure:\n        {\n            "CrewCreationDetails": {\n                "Name": "string",\n                "Process": "sequence/horizontal",\n                "Agents": ["list of agent names"],\n                "Tasks": ["list of task names"],\n                "ManagerLLM": "model name",\n                "ManagerAgent": "agent name",\n                "Verbose": boolean,\n                "Memory": "enabled/disabled",\n                "Cache": "enabled/disabled",\n                "Planning": "string",\n                "MaxReqMin": number\n            },\n            "Tools": [\n                {\n                    "tool_id": "string",\n                    "name": "string",\n                    "type": "string",\n                    "description": "string",\n                    "availability": boolean\n                }\n            ],\n            "Agents": [\n                {\n                    "CreateAgent": "string",\n                    "Role": "string",\n                    "Backstory": "string",\n                    "Goal": "string",\n                    "AllowDelegation": "yes/no",\n                    "Verbose": boolean,\n                    "Cache": "enabled/disabled",\n                    "LLM": "model name",\n                    "Temperature": number,\n                    "MaxIteration": number,\n                    "SelectTools": ["list of tool names"]\n                }\n            ],\n            "Tasks": [\n                {\n                    "CreateTask": "string",\n                    "Description": "string",\n                    "ExpectedOutput": "string",\n                    "Agent": "string",\n                    "AsyncExecution": boolean,\n                    "ContextFromAsyncTasks": "string",\n                    "ContextFromSyncTasks": "string"\n                }\n            ]\n        }\n        \n        Rules:\n        1. Map similar fields to their standard names (e.g., "Crew creation details" -> "CrewCreationDetails")\n        2. Convert values to appropriate types (boolean, number, string)\n        3. Ensure all required fields are present\n        4. Keep the original data and intent while normalizing the format\n        5. If a field doesn\'t exist in input, use reasonable defaults\n        \n        Return the normalized JSON.\n        ', 'role': 'user'}], 'model': 'gpt-4o-mini', 'n': 1, 'stream': False, 'temperature': 0.7}}
2025-02-10 20:41:29,712 - openai._base_client - [DEBUG] - _base_client.py:_request:993 - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-02-10 20:41:29,713 - httpcore.connection - [DEBUG] - _trace.py:trace:47 - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=None socket_options=None
2025-02-10 20:41:29,751 - httpcore.connection - [DEBUG] - _trace.py:trace:47 - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16b0ea850>
2025-02-10 20:41:29,751 - httpcore.connection - [DEBUG] - _trace.py:trace:47 - start_tls.started ssl_context=<ssl.SSLContext object at 0x16c90b770> server_hostname='api.openai.com' timeout=None
2025-02-10 20:41:29,763 - httpcore.connection - [DEBUG] - _trace.py:trace:47 - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x16b833ad0>
2025-02-10 20:41:29,763 - httpcore.http11 - [DEBUG] - _trace.py:trace:47 - send_request_headers.started request=<Request [b'POST']>
2025-02-10 20:41:29,764 - httpcore.http11 - [DEBUG] - _trace.py:trace:47 - send_request_headers.complete
2025-02-10 20:41:29,764 - httpcore.http11 - [DEBUG] - _trace.py:trace:47 - send_request_body.started request=<Request [b'POST']>
2025-02-10 20:41:29,764 - httpcore.http11 - [DEBUG] - _trace.py:trace:47 - send_request_body.complete
2025-02-10 20:41:29,764 - httpcore.http11 - [DEBUG] - _trace.py:trace:47 - receive_response_headers.started request=<Request [b'POST']>
2025-02-10 20:41:55,453 - httpcore.http11 - [DEBUG] - _trace.py:trace:47 - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 10 Feb 2025 15:11:55 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-pfwpx0yphplkvkhph5n6lgvi'), (b'openai-processing-ms', b'24991'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'4000000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'3997635'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'35ms'), (b'x-request-id', b'req_8814f820b863d950a96fd35c8ac25b86'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=wxz062JG1ohm5ioDyrXQ3T04gtYbKwHjv.4Nv96L8x4-1739200315-1.0.1.1-uiTqIfvv1HEThMF_GAO1.1SCy4ZZmpj_.9dXk9iT6juxuTjFh9i4sdZFK2EUSPfyk1yzg9i2Smnp8RKYXopy3A; path=/; expires=Mon, 10-Feb-25 15:41:55 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=pUYjn2MJyblGSFIFgV56Wv9IgWabk8YcTTuEybEULOE-1739200315472-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'90fd08333832032f-AMD'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-02-10 20:41:55,457 - httpx - [INFO] - _client.py:_send_single_request:1038 - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-02-10 20:41:55,457 - httpcore.http11 - [DEBUG] - _trace.py:trace:47 - receive_response_body.started request=<Request [b'POST']>
2025-02-10 20:41:55,458 - httpcore.http11 - [DEBUG] - _trace.py:trace:47 - receive_response_body.complete
2025-02-10 20:41:55,459 - httpcore.http11 - [DEBUG] - _trace.py:trace:47 - response_closed.started
2025-02-10 20:41:55,459 - httpcore.http11 - [DEBUG] - _trace.py:trace:47 - response_closed.complete
2025-02-10 20:41:55,459 - openai._base_client - [DEBUG] - _base_client.py:_request:1032 - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 10 Feb 2025 15:11:55 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'user-pfwpx0yphplkvkhph5n6lgvi'), ('openai-processing-ms', '24991'), ('openai-version', '2020-10-01'), ('x-ratelimit-limit-requests', '5000'), ('x-ratelimit-limit-tokens', '4000000'), ('x-ratelimit-remaining-requests', '4999'), ('x-ratelimit-remaining-tokens', '3997635'), ('x-ratelimit-reset-requests', '12ms'), ('x-ratelimit-reset-tokens', '35ms'), ('x-request-id', 'req_8814f820b863d950a96fd35c8ac25b86'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=wxz062JG1ohm5ioDyrXQ3T04gtYbKwHjv.4Nv96L8x4-1739200315-1.0.1.1-uiTqIfvv1HEThMF_GAO1.1SCy4ZZmpj_.9dXk9iT6juxuTjFh9i4sdZFK2EUSPfyk1yzg9i2Smnp8RKYXopy3A; path=/; expires=Mon, 10-Feb-25 15:41:55 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=pUYjn2MJyblGSFIFgV56Wv9IgWabk8YcTTuEybEULOE-1739200315472-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '90fd08333832032f-AMD'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-02-10 20:41:55,460 - openai._base_client - [DEBUG] - _base_client.py:_request:1040 - request_id: req_8814f820b863d950a96fd35c8ac25b86
2025-02-10 20:41:55,495 - AICrewGenerator - [ERROR] - ai_crew_generator.py:normalize_json_input:704 - Error normalizing JSON: Expecting value: line 1 column 1 (char 0)
2025-02-10 20:41:55,495 - main - [ERROR] - ai_crew_generator.py:main:794 - Unexpected error: Failed to normalize JSON format: Expecting value: line 1 column 1 (char 0)
2025-02-10 20:41:55,495 - main - [DEBUG] - ai_crew_generator.py:main:795 - Unexpected error details:
Traceback (most recent call last):
  File "/Users/varunisrani/Desktop/CrewAI-Studio/ai_crew_generator.py", line 700, in normalize_json_input
    normalized_data = json.loads(response.content)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/varunisrani/.pyenv/versions/3.11.11/lib/python3.11/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/varunisrani/.pyenv/versions/3.11.11/lib/python3.11/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/varunisrani/.pyenv/versions/3.11.11/lib/python3.11/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/varunisrani/Desktop/CrewAI-Studio/ai_crew_generator.py", line 766, in main
    normalized_json = generator.normalize_json_input(json_data)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/varunisrani/Desktop/CrewAI-Studio/ai_crew_generator.py", line 705, in normalize_json_input
    raise ValueError(f"Failed to normalize JSON format: {str(e)}")
ValueError: Failed to normalize JSON format: Expecting value: line 1 column 1 (char 0)
2025-02-10 20:43:08,436 - main - [INFO] - ai_crew_generator.py:main:798 - User chose to exit after error
2025-02-10 20:43:09,033 - httpcore.connection - [DEBUG] - _trace.py:trace:47 - close.started
2025-02-10 20:43:09,033 - httpcore.connection - [DEBUG] - _trace.py:trace:47 - close.complete
