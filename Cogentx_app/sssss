import streamlit as st
from crewai import Agent, Task, Crew, Process
from crewai import LLM
from langchain_openai import ChatOpenAI
from langchain_groq import ChatGroq
from langchain_anthropic import ChatAnthropic
from dotenv import load_dotenv
import os
from crewai_tools import *





load_dotenv()

def create_lmstudio_llm(model, temperature):
    api_base = os.getenv('LMSTUDIO_API_BASE')
    os.environ["OPENAI_API_KEY"] = "lm-studio"
    os.environ["OPENAI_API_BASE"] = api_base
    if api_base:
        return ChatOpenAI(openai_api_key='lm-studio', openai_api_base=api_base, temperature=temperature)
    else:
        raise ValueError("LM Studio API base not set in .env file")

def create_openai_llm(model, temperature):
    safe_pop_env_var('OPENAI_API_KEY')
    safe_pop_env_var('OPENAI_API_BASE')
    load_dotenv(override=True)
    api_key = os.getenv('OPENAI_API_KEY')
    api_base = os.getenv('OPENAI_API_BASE', 'https://api.openai.com/v1/')
    if api_key:
        return ChatOpenAI(openai_api_key=api_key, openai_api_base=api_base, model_name=model, temperature=temperature)
    else:
        raise ValueError("OpenAI API key not set in .env file")

def create_groq_llm(model, temperature):
    api_key = os.getenv('GROQ_API_KEY')
    if api_key:
        return ChatGroq(groq_api_key=api_key, model_name=model, temperature=temperature)
    else:
        raise ValueError("Groq API key not set in .env file")

def create_anthropic_llm(model, temperature):
    api_key = os.getenv('ANTHROPIC_API_KEY')
    if api_key:
        return ChatAnthropic(anthropic_api_key=api_key, model_name=model, temperature=temperature)
    else:
        raise ValueError("Anthropic API key not set in .env file")

def safe_pop_env_var(key):
    try:
        os.environ.pop(key)
    except KeyError:
        pass
        
LLM_CONFIG = {
    "OpenAI": {
        "create_llm": create_openai_llm
    },
    "Groq": {
        "create_llm": create_groq_llm
    },
    "LM Studio": {
        "create_llm": create_lmstudio_llm
    },
    "Anthropic": {
        "create_llm": create_anthropic_llm
    }
}

def create_llm(provider_and_model="OpenAI: gpt-4o-mini", temperature=0.7):
    """Create an LLM instance based on provider and model."""
    if isinstance(provider_and_model, str) and ":" in provider_and_model:
        provider, model = provider_and_model.split(": ")
        create_llm_func = LLM_CONFIG.get(provider, {}).get("create_llm")
        if create_llm_func:
            return create_llm_func(model, temperature)
    
    # Default to CrewAI's LLM with OpenAI
    return LLM(
        api_key=os.getenv("OPENAI_API_KEY"),
        model="gpt-4o-mini",
        temperature=temperature
    )

def load_agents():
    llm = create_llm()
    
    # Create CEO Agent as the strategic overseer
    ceo_agent = Agent(
        role="CEO Agent",
        backstory="""As the strategic overseer, I specialize in analyzing user requirements and creating customized AI solutions. 
        I ensure that every component of the solution is directly derived from and justified by the user's specific needs.""",
        goal="""To transform user requirements into a precisely tailored AI solution by:
        1. Ensuring every component directly addresses user needs
        2. Eliminating any unnecessary elements
        3. Validating that the solution exactly matches requirements""",
        allow_delegation=True,
        verbose=True,
        llm=llm
    )

    # Regular agents list (excluding CEO Agent)
    agents = [
        Agent(
            role="Requirements Analyst",
            backstory="""I specialize in precise requirement analysis and specification. 
            I focus on extracting exactly what the user needs, nothing more and nothing less.""",
            goal="""To create exact, focused specifications by:
            1. Identifying core requirements
            2. Eliminating non-essential elements
            3. Ensuring every specification ties directly to user needs""",
            allow_delegation=True,
            verbose=True,
            llm=llm
        ),
        Agent(
            role="Architecture Specialist",
            backstory="""I design minimal, focused architectures that precisely match requirements.
            I ensure every component has a direct purpose in fulfilling user needs.""",
            goal="""To create efficient, focused architectures by:
            1. Including only necessary components
            2. Ensuring direct requirement traceability
            3. Eliminating unnecessary complexity""",
            allow_delegation=True,
            verbose=True,
            llm=llm
        ),
        Agent(
            role="Implementation Agent",
            backstory="""I implement solutions with precise alignment to requirements.
            I ensure every implementation detail serves a specific, necessary purpose.""",
            goal="""To create focused implementations by:
            1. Building only what's needed
            2. Ensuring direct requirement fulfillment
            3. Maintaining minimal complexity""",
            allow_delegation=True,
            verbose=True,
            llm=llm
        ),
        Agent(
            role="Best AI Agent Developer",
            backstory="""I specialize in creating precisely tailored AI solutions.
            I ensure every feature and capability directly serves the user's specific needs.""",
            goal="""To develop optimal AI solutions by:
            1. Implementing only necessary features
            2. Ensuring direct alignment with requirements
            3. Validating solution effectiveness""",
            allow_delegation=True,
            verbose=True,
            llm=llm
        )
    ]
    return agents, ceo_agent

def load_tasks(agents, ceo_agent, user_requirements):
    """Load tasks based on user requirements and available agents"""
    tasks = [
        Task(
            description=f"""First, analyze these specific user requirements and identify EXACTLY what kind of agent is needed:
User Requirements: {user_requirements}

Your analysis must ONLY focus on what's explicitly mentioned in the user requirements.""",
            expected_output="Initial Requirements Analysis JSON",
            agent=next(agent for agent in agents if agent.role == "Requirements Analyst")
        ),
        Task(
            description=f"""Based on the initial analysis and {user_requirements}, create a technical specification that ONLY includes what's needed.
Focus ONLY on what's explicitly needed for {user_requirements}.""",
            expected_output="Technical Specification JSON",
            agent=next(agent for agent in agents if agent.role == "Architecture Specialist")
        ),
        Task(
            description=f"""Create an implementation plan that addresses ONLY what's needed for {user_requirements}.
Everything must tie directly to {user_requirements}.""",
            expected_output="Implementation Plan JSON",
            agent=next(agent for agent in agents if agent.role == "Implementation Agent")
        ),
        Task(
            description=f"""Review all previous analyses and create a solution following EXACTLY this format:

Crew creation details:
Name (just id, it doesn't affect anything)
Process [choose: sequence/horizontal]
Agents [list all required agents with their specific roles]
Tasks [list all required tasks with their specific purposes]
Manager LLM
Manager Agent
Verbose
Memory
Cache
Planning
Max req/min: 1000

Available Tools (ONLY use these, no others allowed):
- ScrapeWebsiteTool (web scraping)
- SerperDevTool (search operations)
- WebsiteSearchTool (website searching)
- ScrapeWebsiteToolEnhanced (advanced scraping)
- SeleniumScrapingTool (dynamic website scraping)
- ScrapeElementFromWebsiteTool (specific element scraping)
- CustomApiTool (API integrations)
- codeInterpreterTool (code interpretation)
- CustomCodeInterpreterTool (custom code execution)
- FileReadTool (file reading)
- CustomFileWriteTool (file writing)
- DirectorySearchTool (directory searching)
- DirectoryReadTool (directory reading)
- YoutubeVideoSearchTool (YouTube video search)
- YoutubeChannelSearchTool (YouTube channel search)
- GithubSearchTool (GitHub searching)
- CodeDocsSearchTool (code documentation search)
- YahooFinanceNewsTool (financial news)
- TXTSearchTool (text file search)
- CSVSearchTool (CSV file search)
- CSVSearchToolEnhanced (advanced CSV operations)
- DOCXSearchTool (Word document search)
- EXASearchTool (EXA file search)
- JSONSearchTool (JSON file search)
- MDXSearchTool (MDX file search)
- PDFSearchTool (PDF file search)

For each tool you select, specify:
Tool Name: [name from list above]
Purpose: [specific purpose in this solution]
Configuration: [any specific settings needed]

Tasks (create separate entry for each task):
Task 1:
- Create task: [specific task name]
- Description: [detailed description]
- Expected output: [specific output format]
- Agent: [responsible agent]
- Async execution: [yes/no]
- Context from async tasks: [required async context]
- Context from sync tasks: [required sync context]
- Required tools: [list specific tools from above]

Task 2:
[Same format as Task 1]

Task 3:
[Same format as Task 1]

[Continue for all required tasks...]

For each Agent:
Agent 1:
- Create agent: [agent name]
- Role: [specific role description]
- Backstory: [relevant background]
- Goal: [specific objectives]
- Allow delegation: [yes/no]
- Verbose: [true/false]
- Cache: [enabled/disabled]
- LLM: [model name]
- Temperature: [value]
- Max iteration: [number]
- Tools: [list specific tools from above]

Agent 2:
[Same format as Agent 1]

Agent 3:
[Same format as Agent 1]

[Continue for all required agents...]

CRITICAL:
1. Follow this format EXACTLY
2. Only use tools from the provided list
3. Each task must be listed separately with complete details
4. Each agent must be listed separately with complete details
5. All components must work together coherently
6. DO NOT add any fields not shown in this format
7. DO NOT remove any fields shown in this format
8. Each task must specify which tools it needs from the available list
9. Each agent must specify which tools it needs from the available list""",
            expected_output="Solution Following Exact Format",
            agent=ceo_agent
        )
    ]
    return tasks

def delegate_work(task, context, coworker):
    """
    Delegate a task to a coworker
    
    Args:
        task (str): The task description
        context (str): The context for the task
        coworker (str): The role/name of the coworker
    
    Returns:
        str: The result of the delegation
    """
    try:
        return {
            "task": task,
            "context": context, 
            "coworker": coworker
        }
    except Exception as e:
        return f"Error delegating work: {str(e)}"

def main():
    st.title("AI Agent Creator")
    st.markdown("""
    ### Welcome to the AI Agent Creator
    Please describe the functionalities and features you need in your AI agent.
    Our team of agents will analyze your requirements and generate a final report in JSON format including:
    - Agent List: The names and roles of all agents created.
    - Task List: All tasks generated based on your requirements.
    - Tool List: All available tools used in the AI agent creation.
    """)

    # Simple user input
    user_prompt = st.text_area(
        "What kind of AI agent would you like to create?",
        placeholder="Example: I need an AI agent that can process and analyze data to generate insights.",
        help="Describe your requirements - what should the agent be able to do?"
    )

    if st.button("Create AI Agent"):
        if not user_prompt:
            st.warning("Please describe your requirements.")
            return

        with st.spinner("Creating your AI agent..."):
            try:
                agents, ceo_agent = load_agents()
                tasks = load_tasks(agents, ceo_agent, user_prompt)
                
                crew = Crew(
                    agents=agents,
                    tasks=tasks,
                    process=Process.sequential,
                    manager_agent=ceo_agent
                )

                result = crew.kickoff()
                
                st.success("AI Agent created successfully!")
                
                st.json(result)
                
            except Exception as e:
                st.error(f"An error occurred: {str(e)}")

if __name__ == '__main__':
    main()
